---
title: "Day5_Geo"
format: html
editor: visual
---

![](images/banner2.png)

# Topics

-   [What is Geographic Information System's (GIS)?]

-   [Spatial Data types]

-   [Advantages and disadvantages of each type of data.]

-   [What is a vector layer?]

-   [What is a Coordinate Reference Systems (CRS):]

    -   [Diferent types of Coordinate reference Systems (CRS)]

    -   [Projections]

    -   [Notation]

    -   [Choosing a projection]

    -   [Universal Tranverse Mercator (UTM)]

-   [Activities]

    -   [Activity 1: Create a plot of Kansas in where we can see the locations of Mesonet Stations] (Spatial visualization)

    -   [Activity 2: Create a VRT prescription to change the seeding rate in corn crop.] (PrecisionAg example)

    -   [Activity 3: Economic benefit per zone]

## What is Geographic Information System's (GIS)?

Technically, a GIS can be defined as a management technology of geographic information formed by electronic equipment (hardware) properly programmed (software) that allow manage a series of spatial data (geographical information) and carry out complex analyzes with these following the criteria imposed by the scientific team (staff).

![https://gisgeography.com/what-gis-geographic-information-systems/](images/What-Is-Geographic-Information-Systems-Featured.jpg)

### Spatial Data types

The two primary types of spatial data are **vector and raster data** in a GIS. But what is the difference between raster and vector data?

Vector data is ***not*** made up of a grid of pixels. Instead, vector graphics are comprised of **vertices and paths**. The three basic symbol types for vector data are points, lines, and polygons (areas).

**Raster data** is made up of pixels (also referred to as grid cells). They are usually regularly spaced and square but they don't have to be. Rasters often look pixelated because each pixel has its own value or class.

![https://medium.com/analytics-vidhya/raster-vs-vector-spatial-data-types-11325b83852d](images/1_y8YJJOafQtrzU8zmmUxH3A.png)

### **Advantages and disadvantages of each type of data.** 

-   **Vector type:**

    -   **Advantages**: vector data have vertices and paths, this means that the graphical output is generally more aesthetically pleasing. Furthermore, it gives higher geographic accuracy because data isn't dependent on grid size. Topology rules can help data integrity with vector data models. Not only that, network analysis and proximity operations use vector data structures. [Reference](https://gisgeography.com/spatial-data-types-vector-raster/)

    -   **Disadvantages**: Continuous data is poorly stored and displayed as vectors. If you want to display continuous data as a vector, it would require substantial generalization.Although topology is useful for vector data, it is often processing intensive. Any feature edits require updates on topology. With a lot of features, vector manipulation algorithms are complex. [Reference](https://gisgeography.com/spatial-data-types-vector-raster/)

-   **Raster type:**

    -   **Advantages:** A raster grid format is a data model for satellite data and other [**remote sensing**](https://gisgeography.com/remote-sensing-earth-observation-guide/) data. For raster positions, it's simple to understand cell size. [**Map algebra**](https://gisgeography.com/map-algebra-global-zonal-focal-local/) with raster data is usually quick and easy to perform. Overall, quantitative analysis is intuitive with discrete or continuous rasters. [Reference](https://gisgeography.com/spatial-data-types-vector-raster/)

    -   **Disadvantages**: Because cell size contributes to graphic quality, it can have a pixelated look and feel. To illustrate, linear features and paths are difficult to display. You cannot create network datasets or perform [**topology rules**](https://gisgeography.com/topology-rules-arcgis/) on rasters. Also, you don't have the flexibility with raster data attribute tables. Raster datasets can become potentially very large because they record values for each cell in an image. As resolution increases, the size of the cell decreases. But this comes at a cost for speed of processing and data storage. [Reference](https://gisgeography.com/spatial-data-types-vector-raster/)

### What is a vector layer?

Vector layers are essentially sets of geometries associated with non-spatial attributes. The geometries are sequences of one or more point coordinates, possibly connected to form lines or polygons. The non-spatial attributes come in the form of a table.

![http://132.72.155.230:3838/r/vector-layers.html](images/Attribute_Table.png){width="692"}

#### Then, the vector layers...

-   Describe geographic features, using vectors defined by pairs of coordinates relative to some cartographic system (CRS).

-   A pair of coordinates and their altitude manage a point.

-   With two points we can generate a line.

-   Also, through a grouping of lines they form polygons.

Commonly used vector layer file formats include binary formats (such as the **Shapefile**) and plain text formats (such as **GeoJSON**). Vector layers are also frequently kept in a spatial database, such as **PostgreSQL/PostGIS**.

| **Type**          | **Format**                    | **File extension**                  |
|------------------|-------------------------|-----------------------------|
| Binary            | **ESRI Shapefile**            | `.shp`, `.shx`, `.dbf`, `.prj`, ... |
|                   | GeoPackage (GPKG)             | `.gpkg`                             |
| Plain Text        | GeoJSON                       | `.json` or `.geojson`               |
|                   | GPS Exchange Format (GPX)     | `.gpx`                              |
|                   | Keyhole Markup Language (KML) | `.kml`                              |
| Spatial Databases | PostGIS / PostgreSQL          |                                     |

In **R**, The `sf` package, is a newer (2016-) package for working with vector layers in R, which we are going to use in this book. In recent years, `sf` has become the standard package for working with vector data in R, practically replacing `sp`, `rgdal`, and `rgeos`. Pebesma, 2018, The R Journal (<https://journal.r-project.org/archive/2018-1/>)

More details in the sf documentation: <https://r-spatial.github.io/sf/articles/sf1.html>

### What is a Coordinate Reference Systems (CRS):

A GCS is a system for locating the position of a given location on the earth surface using a 3D model of the globe (spheroid) and angular measurements called latitude and longitude. Longitude and latitude are based on the angles relative to the earths center (the origin). Lines of latitude run east to west and are used to identify positions north or south of the equator with values between -90 and +90âˆ˜. Lines of longitude run north to south and are used to identify positions to the east or west of the prime meridian with values between -180 to +180\^. You can combine latitude and longitude to identify a specific point on the surface of the earth. [Reference](https://bookdown.org/michael_bcalles/gis-crash-course-in-r/intro.html#geographic-coordinate-systems)

In reality, the earth is not a perfect spheroid like a GCS would suggest. The earth is in fact, a lump misshapen rock. In fact, because a GCS is just a model of the earth, it actually will be more or less accurate for different parts of the world, depending on where the center of the earth is defined relative to the worlds actual shape and the exact specification of the spheroid being used.

![https://en.wikipedia.org/wiki/Geoid](images/800px-Geoid_undulation_10k_scale.jpg){width="516"}

#### Diferent types of Coordinate reference Systems (CRS)

The earth has an irregular spheroid-like shape. The natural coordinate reference system for geographic data is longitude/latitude. This is an *angular* system. The latitude (phi) of a point is the angle between the equatorial plane and the line that passes through a point and the center of the Earth. Longitude (lambda) is the angle from a reference meridian (lines of constant longitude) to a meridian that passes through the point. [Reference](https://rspatial.org/raster/spatial/6-crs.html)

[![https://bookdown.org/michael_bcalles/gis-crash-course-in-r/images/lat-long-3.jpg](images/lat-long-3.jpg)](https://bookdown.org/michael_bcalles/gis-crash-course-in-r/images/lat-long-3.jpg)

Obviously we cannot actually measure these angles. But we can estimate them. To do so, you need a model of the shape of the earth. Such a model is called a 'datum'. The simplest datums are a spheroid (a sphere that is 'flattened' at the poles and bulges at the equator). More complex datums allow for more variation in the earth's shape. The most commonly used datum is called **WGS84 (World Geodesic System 1984).** This is very similar to NAD83 (The North American Datum of 1983). Other, local datums exist to more precisely record locations for a single country or region.

So the basic way to record a location is a coordinate pair in degrees and a reference datum. (Sometimes people say that their coordinates are "in WGS84". That is meaningless; but they typically mean to say that they are longitude/latitude relative to the WGS84 datum).

#### **Projections**

A major question in spatial analysis and cartography is how to transform this three dimensional angular system to a two dimensional planar (sometimes called "Cartesian") system. A planar system is easier to use for certain calculations and required to make maps (unless you have a 3-d printer). The different types of planar coordinate reference systems are referred to as 'projections'. Examples are 'Mercator', 'UTM', 'Robinson', 'Lambert', 'Sinusoidal' 'Robinson' and 'Albers'.

There is not one best projection. Some projections can be used for a map of the whole world; other projections are appropriate for small areas only. One of the most important characteristics of a map projection is whether it is "equal area" (the scale of the map is constant) or "conformal" (the shapes of the geographic features are as they are seen on a globe). No two dimensional map projection can be both conformal and equal-area (but they can be approximately both for smaller areas, e.g.Â UTM, or Lambert Equal Area for a larger area), and some are neither. [Reference](https://rspatial.org/raster/spatial/6-crs.html)

![https://www.e-education.psu.edu/geog486/node/675](images/projection_surfaces.png)

#### **Notation**

A planar CRS is defined by a projection, datum, and a set of parameters. The parameters determine things like where the center of the map is. The number of parameters depends on the projection. It is therefore not trivial to document a projection used, and several systems exist. In *R* we use the \[PROJ.4\[(<ftp://ftp.remotesensing.org/proj/OF90-284.pdf> ) notation. PROJ.4 is the name of an open source software library that is commonly used for CRS transformation.

Here is a list of [commonly used projections](http://www.remotesensing.org/geotiff/proj_list/) and their parameters in PROJ4 notation. You can find many more of these on [spatialreference.org](http://spatialreference.org/ref/epsg/4326/)

Most commonly used CRSs have been assigned a "EPSG code" (EPSG stands for European Petroleum Survey Group). This is a unique ID that can be a simple way to identify a CRS. For example `EPSG:27561` is equivalent to `+proj=lcc +lat_1=49.5 +lat_0=49.5 +lon_0=0 +k_0=0.999877341 +x_0=6 +y_0=2 +a=6378249.2 +b=6356515` `+towgs84=-168,-60,320,0,0,0,0 +pm=paris +units=m +no_defs`. However `EPSG:27561` is opaque and should not be used outside of databases. In R use the PROJ.4 notation, as that can be readily interpreted without relying on software. [Reference](https://rspatial.org/raster/spatial/6-crs.html)

#### 
Choosing a projection

The main goal for working with spatial data in applied research is to make sure that:

1.  The spatial data you are working with are in an appropriate map projection based on the scale and the part of the world that your data are from (e.g.Â the study area extent)

2.  That if working with multiple spatial datasets, all of them use the exact same GCS and map projection

In practice, when we import existing spatial data from different open data portals they often (but not always) will already be in a certain map projection. It is your job then to check that it is an appropriate one for your research area, and make sure all the other data are in the same GCS and projection. If they are not there are straightforward functions in R to convert them to a common coordinate system and projection. The next question may be how do we know what is an appropriate projection? The answer is that it is completely dependent on the scale and part of the world (see point 2 above) but many different government agencies from different parts of the world will provide recommendations. For example, if your data cover the province of British Columbia the standard projection for province wide mapping is BC Albers Equal Area Projection. If you are only analyzing data from a specific municipality you would generally use a specific Universal Transverse Mercator (UTM) zone projection that is designed for the part of the world the municipality falls into. Generally, a Google search will provide you with recommendations for an appropriate Geographic Coordinate System and Map Projection for your data based on the part of the world and the scale. [Reference](https://bookdown.org/michael_bcalles/gis-crash-course-in-r/intro.html#geographic-coordinate-systems)

#### 
Universal Tranverse Mercator (UTM)

Is one of the most common CRS, the UTM ([Universal Transverse Mercator](https://pubs.er.usgs.gov/publication/fs07701)) coordinate system divides the world into sixty north-south zones, each 6 degrees of longitude wide. UTM zones are numbered consecutively beginning with Zone 1, which includes the westernmost point of Alaska, and progress eastward to Zone 19, which includes Maine.
[Reference](https://www.usgs.gov/faqs/how-are-utm-coordinates-measured-usgs-topographic-maps#:~:text=The%20UTM%20(Universal%20Transverse%20Mercator,Zone%2019%2C%20which%20includes%20Maine.)

![https://gisgeography.com/wp-content/uploads/2016/05/Universe-Transverse-Mercator-Cylinder.png](images/Universe-Transverse-Mercator-Cylinder.png)

## Activities

#### Activity 1: Create a plot of Kansas in where we can see the locations of Mesonet Stations

Steps

```{r}

# Libraries
library(dplyr)
library(tidyr)
library(sf)
library(albersusa)
library(ggplot2)
library(mapview)
library(tidyverse)
```

1.  Load the county file and filter only Kansas.

```{r}

counties_usa <- counties_sf()
counties_usa %>% data.frame()

class(counties_usa)

colnames(counties_usa)

unique(counties_usa$state) %>% as.data.frame()
```

```{r}
kansas_counties <-  counties_usa %>% filter(state == 'Kansas')
```

```{r}
ggplot() + 
  geom_sf(data = kansas_counties)
```

-   Load the entire USA states file

```{r}
usa_states <- usa_sf()
```

Briefly visualization to check that everything is ok.

```{r}
ggplot() +
  geom_sf(data = usa_states) +
     coord_sf(crs = st_crs(2163), 
              xlim = c(-2500000, 2500000), 
              ylim = c(-2300000, 730000))
```

```{r}
ggplot(data = usa_states) +
    geom_sf() +
    geom_sf(data = kansas_counties, aes(fill=as.factor(name)),
            show.legend = FALSE) +
    scale_fill_viridis_d() +
    coord_sf(crs = st_crs(4326), 
             xlim = c(-104, -93), ylim = c(36, 41.5))
```

-   Load the mesonet weather stations locations files

```{r}
mesonet_sites <- read.csv('../data/Geo_Class1/KSMeso-Station-Metadata.csv',skip = 2)
mesonet_sites
```

```{r}
mesonet_sites <- mesonet_sites %>% 
  st_as_sf(coords = c("Longitude","Latitude")) %>%
  st_set_crs(st_crs("epsg:4326"))

plot(mesonet_sites)
```

-   Use ggplot2 to plot and visualize the information. Add the name of axis X and Y, Title and subtitle

```{r}
ggplot() +
    geom_sf(data = usa_states,color='gray',fill='#343a40',size=0.4) +
    geom_sf(data = kansas_counties, aes(fill=as.factor(name)),
            show.legend = FALSE,size=0.2,color='black') + 
    geom_sf(data = mesonet_sites,size=3, color='red',
            fill='black')+ 
    scale_fill_viridis_d() +
    coord_sf(crs = st_crs(4326), 
             xlim = c(-104, -93), ylim = c(36, 41)) 
```

#### **Activity 2**: Create a VRT prescription to change the seeding rate in corn crop.

Steps

-   Load the management zones files and the corn density trial.

```{r}

zones <- read_sf('../data/Geo_Class1/management_zones.shp')

seeding_rate_trial <- read_sf('../data/Geo_Class1/corn_density_trial.shp')
```

```{r}
zones

class(zones)

seeding_rate_trial

class(seeding_rate_trial)
```

-   Check the coordinate reference systems of both files. Change it if is necessary.

```{r}
st_crs(zones)

```

```{r}
st_crs(seeding_rate_trial)
```

```{r}
zones <- zones %>%
  st_set_crs(st_crs("epsg:3857")) %>%
  st_transform(crs=32614) %>%
  mutate(Zone = factor(Zone, levels=c("Low", "Medium", "High")),
         area_ha = units::set_units(st_area(zones),ha))



seeding_rate_trial <- seeding_rate_trial %>%
  st_set_crs(st_crs("epsg:3857")) %>%
  st_transform(crs=32614)
```

-   Visualize interactively with Mapview the management zones polygons and the corn_seeding_rate_trial

```{r}
palette<-c("#c32f27","#ffdc00",'#007f5f')
rdylgn<-colorRampPalette(palette)


mapview(zones, zcol = "Zone", 
        legend = TRUE, col.regions = rdylgn, 
        map.types = c("Esri.WorldImagery")) + 
  mapview(seeding_rate_trial, zcol = "Plants_ha")
```

-   Use st_join function to join the Management zone to the corn_seeding_rate_trial

```{r}
corn_sr_zones <-st_join(seeding_rate_trial,zones)

mapview(corn_sr_zones, zcol = "Zone",
        col.regions = rdylgn, 
        map.types = c("Esri.WorldImagery"))
```

-   Visualize the population response curves.

```{r}

corn_sr_zones %>%
  ggplot() +
  geom_point(aes(x=Plants_ha,y=Yield,color=Zone)) + 
  geom_smooth(aes(x=Plants_ha,y=Yield),
              method = "lm", formula = y ~ x + I(x^2)) + 
  scale_color_manual(values=palette) +
  xlab('Plant density (pl/ha)') + ylab('Corn yield (kg/ha)') + 
  labs(title = 'Corn yield response to plant density',
       subtitle = 'Response to field level')

```

```{r fig.width=8}
corn_sr_zones %>%
  ggplot() +
  geom_point(aes(x=Plants_ha,y=Yield,color=Zone)) + 
  geom_smooth(aes(x=Plants_ha,y=Yield),
              method = "lm", formula = y ~ x + I(x^2)) + 
  scale_color_manual(values=palette) +
  xlab('Plant density (pl/ha)') + ylab('Corn yield (kg/ha)') + 
  labs(title = 'Corn yield response to plant density',
       subtitle = 'Response to field level') +
  facet_wrap(~Zone)
```

-   Obtain regressions for every management zone.

```{r}
coef_zones <- corn_sr_zones %>% 
  group_by(Zone) %>%
  nest() %>% 
  mutate(model = data %>% 
           purrr::map(.f = ~lm(Yield ~ Plants_ha + I(Plants_ha^2), data = ..1))) %>% 
  mutate(b0 = model %>% purrr::map_dbl(~coef(.)[1]),
         b1 = model %>% purrr::map_dbl(~coef(.)[2]),
         b2 = model %>% purrr::map_dbl(~coef(.)[3])) %>%
  dplyr::select(Zone,b0,b1,b2)
coef_zones
```

-   Calculate the Agronomical Optimal Seeding rate and the Economical Optimal Seeding Rate (EOSR) based on a price ratio calculated with a seed bag price of 160 usd/bag and 340 USD/Mg (0.34usd/kg) that is the price at harvesting.

$$
AOSR=\frac{-\beta1}{2*\beta2}
$$

$$
EOSR=\frac{Price\;ratio-\beta1}{2*\beta2}
$$

$$
Price.ratio=\frac{\frac{Price\;seeds\;bag}{nÂ°\;seeds\;bag}}{Price\;corn\;at\;harvest}
$$

-   Each bag has 80000 seeds

```{r}

price_seeds_bag <- 320
price_corn_at_harvest <- 0.31

eosr_corn_zone <- coef_zones %>%
  mutate(AOSR=- b1/(2*b2),
         EOSR = (((price_seeds_bag/80000)/price_corn_at_harvest) - b1)/(2*b2)) 

eosr_corn_zone
```

-   Create a variable rate prescription for corn density

```{r}
vrt_prescription <- left_join(zones, eosr_corn_zone,by = "Zone") 
class(vrt_prescription)

```

```{r}
vrt_prescription
```

-   Variable Seeding Rate prescription ready to load in the planter.

```{r}
mapview(vrt_prescription, zcol = "EOSR", 
        legend = TRUE, col.regions = rdylgn, 
        map.types = c("Esri.WorldImagery"))
```

![https://precisionag.caes.uga.edu/programs/vr-technology.html](images/seeding_rate.jpg)

#### Activity 3: Economic benefit per zone

Using mutate and the approach you want, obtain the economic return per management zone. You should create a column with the yield at EOSR per zone and with this and the price per seed and corn price obtain the value using the next equation

$$
Economic\;revenue = (Price\;Corn*Yield\;at\;EOSR) - (Price\;per\;seed*EOSR) 
$$

```{r}

##
```

### 

### **Resources and** references

-   Telegram in spanish: RSpatial_ES

-   [https://data.eol.ucar.edu/dataset/485.017 (MESONET)](https://data.eol.ucar.edu/dataset/485.017%20(MESONET))

-   <https://gisgeography.com/spatial-data-types-vector-raster/>

-   <https://mgimond.github.io/Spatial/index.html>

-   <https://rspatial.org/raster/index.html>

-   <https://datacarpentry.org/r-raster-vector-geospatial/09-vector-when-data-dont-line-up-crs/>

-   <https://erinbecker.github.io/r-raster-vector-geospatial/09-vector-when-data-dont-line-up-crs/index.html>

-   <https://mgimond.github.io/Spatial/chp11_0.html>

-   <https://castlab.org/tutorial/2019-04-10-spatial-data-in-r/>

-   <https://www.emilyburchfield.org/courses/gsa/5_spatial_intro_lab.html>

-   <https://colab.research.google.com/drive/16roxWflWy89RXFMu1QzkoC2wABomspHa?usp=sharing#scrollTo=R_cUMMSfPW5p>

-   <https://geocompr.robinlovelace.net/adv-map.html>

-   <http://132.72.155.230:3838/r/>

-   <https://cengel.github.io/R-spatial/mapping.html#plotting-simple-features-sf-with-plot>

-   <https://geobgu.xyz/presentations/p_2021_cbs/main.html>

### Books

-   <https://link.springer.com/book/10.1007/978-1-4614-7618-4>

-   <http://gis.humboldt.edu/OLM/r/Spatial%20Analysis%20With%20R.pdf>

-   <https://jakubnowosad.com/BioGIS_19/workshop/#12>
